# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  push:
    branches:
      - main
    paths:
      - 'pom.xml'
      - 'build.gradle'
      - '.github/workflows/maven-publish.yml'
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Publish to GitHub Packages Apache Maven
      if: github.event_name == 'release'
      run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Git user
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Bump version and create tag
      id: versioning
      run: |
        # 获取当前版本号
        version=$(grep -m1 '<version>' pom.xml | sed -E 's/.*<version>(.+)<\/version>.*/\1/')
        # 去掉-SNAPSHOT后缀
        release_version=${version/-SNAPSHOT/}
        # 生成下一个版本号（简单地+0.0.1）
        IFS='.' read -r major minor patch <<<"${release_version//-/ }"
        next_patch=$((patch + 1))
        next_version="$major.$minor.$next_patch-SNAPSHOT"
        # 替换pom.xml和build.gradle中的版本号
        sed -i "s/<version>$version<\/version>/<version>$release_version<\/version>/g" pom.xml
        sed -i "s/version = '$version'/version = '$release_version'/g" build.gradle
        git add pom.xml build.gradle
        git commit -m "chore(release): release v$release_version"
        git tag "v$release_version"
        # 恢复为下一个开发版本
        sed -i "s/<version>$release_version<\/version>/<version>$next_version<\/version>/g" pom.xml
        sed -i "s/version = '$release_version'/version = '$next_version'/g" build.gradle
        git add pom.xml build.gradle
        git commit -m "chore: bump version to $next_version"
        git push origin main --tags

        echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ env.RELEASE_VERSION }}
        name: Release v${{ env.RELEASE_VERSION }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
